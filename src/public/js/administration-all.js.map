{"version":3,"sources":["_combobox.js","_components.js","_detail_page.js","_general.js","app.js","ckeditor_extend.js","dropzone_file_upload.js","html_table_action.js"],"names":[],"mappingsxxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"administration-all.js","sourcesContent":["/**\n * Combobox\n */\n\nvar combobox = function(element)\n{\n    this.class_active = 'active';\n    this.element = $(element);\n    this.searchField = this.element.find(\"ul li input\");\n    this.name = this.element.attr('name');\n    this.value = this.element.attr('value');\n    this.options = this.element.find(\"ul li a\");\n    this.optionMenuInstantiated = false;\n    this.hiddenInputString = \"<input type='hidden' name='' value='' />\";\n\n    /**\n     * Configure hidden input\n     *\n     * @param value\n     */\n    this.configureHiddenInputString = function(value)\n    {\n        if(this.element.find(\"input[name='\"+this.name+\"']\").length){\n            this.element.find(\"input[name='\"+this.name+\"']\").val(value);\n            return;\n        }\n\n        var hiddenInputString = $(this.hiddenInputString);\n        hiddenInputString.val(value);\n        hiddenInputString.attr('name', this.name);\n\n        this.toggleEmptyValueClass(value);\n        this.element.prepend(hiddenInputString);\n    };\n\n    /**\n     * Toggle Placeholder Text Clacss\n     */\n    this.toggleEmptyValueClass = function(value = null)\n    {\n        if(value.length == 0){\n\n            this.element.addClass(\"emptyValue\");\n\n        }else{\n\n            this.element.removeClass(\"emptyValue\");\n\n        }\n    };\n\n    /**\n     * Show\n     */\n    this.show = function()\n    {\n        var self = this;\n\n        this.element.addClass(this.class_active);\n\n        var inputWidth = this.element.outerWidth() - 2;\n        var ul = this.element.find('ul');\n\n        ul.width(inputWidth).show(0, function(){\n\n            if(self.optionMenuInstantiated == false){\n                self.optionMenuInstantiated = true;\n                self.instantiateOptions();\n            }\n\n        });\n\n        var searchInput = this.element.find('input');\n\n        searchInput.focus();\n\n        searchInput.blur(function(){\n            setTimeout(function(){\n\n                self.clearSearch();\n\n                self.hide();\n\n            }, 100);\n        });\n    };\n\n    /**\n     * Hide\n     */\n    this.hide = function()\n    {\n        this.element.removeClass(this.class_active);\n        this.element.find('ul').hide();\n    };\n\n    /**\n     * Instantiate Options (Click Events)\n     */\n    this.instantiateOptions = function()\n    {\n        var self = this;\n\n        this.options.click(function(e){\n            e.preventDefault();\n            self.optionSelect($(this));\n        });\n    };\n\n    /**\n     * Option Select\n     */\n    this.optionSelect = function(element) {\n        console.log(\"Value: \", element.attr('value'));\n        this.configureHiddenInputString(element.attr('value'));\n        this.setLabel(element.html());\n        this.toggleEmptyValueClass(element.attr('value'));\n    };\n\n    /**\n     * Clear Search\n     */\n    this.clearSearch = function(){\n        this.searchField.val(\"\");\n        this.element.find(\"ul li\").removeClass('hidden');\n    };\n\n    /**\n     * Clear Option Select Value\n     */\n    this.clearOptionSelect = function(){\n        this.configureHiddenInputString(\"\");\n    };\n\n    /**\n     * Set Label\n     *\n     * @param name\n     */\n    this.setLabel = function(name) {\n        this.element.find(\"label span\").html(name);\n    };\n\n    /**\n     * Find Label for value\n     *\n     * @param value\n     * @returns {string}\n     */\n    this.findLabelForValue = function(value)\n    {\n        var labelString = \"\";\n\n        this.options.each(function(index, element){\n\n            var elem = $(element);\n\n            if(elem.attr('value') == value){\n                labelString = elem.html();\n            }\n\n        });\n\n        if(labelString.length == 0){\n            labelString = \"Select option...\";\n        }\n\n        return labelString;\n    };\n\n    // Initialize\n    this.configureHiddenInputString(this.value);\n    this.setLabel(this.findLabelForValue(this.value));\n\n    // Listen for search input\n    var self = this;\n\n    this.searchField.keyup(function(input){\n\n        var value = $(this).val();\n\n        self.options.each(function(index, element){\n\n            var optionText = $(element).text();\n            var optionTextLowerCase = optionText.toLowerCase();\n            var optionElement = $(element);\n\n            if(optionTextLowerCase.search(value.toLowerCase()) == -1){\n\n                optionElement.parent().addClass('hidden');\n\n            }else{\n\n                optionElement.parent().removeClass('hidden');\n\n            }\n\n        });\n\n    });\n};\n\n/**\n * Find & Instantiate All objects\n */\n\n$('.combobox').each(function(i, element){\n\n    var combo = new combobox(element);\n\n    $(element).find('label').on('click', function(){\n\n        combo.show();\n\n    });\n\n});","/**\n * Created by daltongibbs on 10/24/16.\n * Test 1\n */\n\nlet self,\n    settings,\n    buttons,\n    Filters = {\n        buttons: {\n            newFilter: $(\".new-filter-button\"),\n            applyFilters: $(\".apply-filters\"),\n            removeFilter: $(\".remove-filter\"),\n            addFilter: $(\".add-filter-button\"),\n\n            newSort: $(\".new-sort-button\"),\n            addSort: $(\".add-sort-button\"),\n            removeSort: $(\".remove-sort\"),\n\n        },\n\n        addFilterForm: $(\".add-filter-form\"),\n        filterSelect: $(\"[name=filterColumn]\"),\n\n        filters: $(\".applied-filters\"),\n\n        addSortForm: $(\".add-sort-form\"),\n\n        sorts: $(\".applied-sorts\"),\n\n        init: function(filterSettings) {\n            self = this;\n            settings = filterSettings;\n            buttons = this.buttons;\n\n            this.bindUIActions();\n            this.removeAppliedFiltersFromSelection();\n\n            if (self.sorts.children(\":not(:first-child)\").length != 0) {\n                buttons.newSort.hide();\n            };\n        }, \n\n        bindUIActions: function() {\n            //--- Filtering\n            //NOTE: The open and close events firing at the same time\n            buttons.newFilter.on(\"click\", function() {\n                self.addFilterForm.toggle();\n            });\n\n            $(document).mouseup(function (event) {\n                if (!self.addFilterForm.is(event.target) && self.addFilterForm.has(event.target).length === 0) {\n                    self.addFilterForm.find(\"[name=filterColumn] :first-child\").prop('selected', 'selected');\n                    self.addFilterForm.find(\".filter-input\").hide();\n                    self.addFilterForm.hide();\n                }\n\n                if (!self.addSortForm.is(event.target) && self.addSortForm.has(event.target).length === 0) {\n                    self.addSortForm.find(\"[name=filterColumn] :first-child\").prop('selected', 'selected');\n                    self.addSortForm.find(\".filter-input\").hide();\n                    self.addSortForm.hide();\n                }\n            });\n\n            self.filterSelect.change(function() {\n                var selected = $(this).val();\n                var filterConfig = settings[selected];\n                var currentInput = self.addFilterForm.find(\".define-filter\");\n\n                if (currentInput.length !== 0) {\n                    currentInput.remove();\n                }\n\n                self.addFilterForm.find(\".filter-input\").show();\n\n                if (filterConfig.hasOwnProperty('type')) {\n                    self[filterConfig.type + \"Input\"](filterConfig);\n                } else {\n                    self.stringInput();\n                }\n            });\n\n            self.addFilterForm.submit(function(event) {\n                event.preventDefault();\n\n                var selectBox = $(this).find('select');\n                var filter = selectBox.find(':selected');\n                var input = $(this).find(\"[name=filterValue]\");\n\n                var column = filter.html();\n                var value = input.val();\n\n                self.addFilter(column, value);\n\n                filter.remove();\n                input.val('');\n                selectBox.find(':first-child').prop('selected', 'selected');\n                self.addFilterForm.toggle();\n\n                self.bindApplyFiltersAction();\n            });\n\n            buttons.removeFilter.on(\"click\", function() {\n                var column = $(this).siblings(\".column\").text();\n                var filter = $(this).parent();\n\n                self.addFilterForm.find('select').append($(\"<option></option>\").text(column));\n\n                filter.remove();\n            });\n\n            if (self.filters.children(\":not(:first-child)\").length !== 0) {\n                self.bindApplyFiltersAction();\n            }\n\n            //--- Sorting\n            buttons.newSort.click(function() {\n                self.addSortForm.toggle();\n            });\n\n            self.addSortForm.submit(function(event) {\n                event.preventDefault();\n\n                let column = $(this).find(\"[name=sortColumn] :selected\").html();\n                let direction = $(this).find(\"[name=sortDirection] :selected\").val();\n\n                self.addSort(column, direction);\n\n                self.addSortForm.toggle();\n                buttons.newSort.hide();\n\n                self.bindApplyFiltersAction();\n            });\n\n            buttons.removeSort.click(function() {\n                $(this).parent().remove();\n\n                buttons.newSort.show();\n\n                self.bindApplyFiltersAction();\n            });\n        },\n\n        addFilter: function(column, value) {\n            var newFilter = self.filters.find(\".filter\").first().clone(true);\n\n            newFilter.find(\".column\").html(column);\n            newFilter.find(\".value\").html(value);\n\n            self.filters.append(newFilter);\n        },\n\n        addSort: function(column, direction) {\n            let newSort = self.sorts.find('.sort').first().clone(true);\n\n            newSort.find(\".column\").html(column);\n            newSort.find('.direction').html(direction);\n\n            self.sorts.append(newSort);\n        },\n\n        bindApplyFiltersAction: function() {\n            // buttons.applyFilters.css(\"color\", \"#BA1C1E\");\n            // buttons.applyFilters.css(\"border-color\", \"#BA1C1E\");\n            buttons.applyFilters.addClass('active-filters');\n\n            buttons.applyFilters.on(\"click\", function() {\n                var url = $(location).attr('pathname') + \"?\";\n\n                self.filters.children(\":not(:first-child)\").each(function(index, filter) {\n                    var column = $(filter).find(\".column\").html();\n                    var value = $(filter).find(\".value\").html();\n\n                    if (index != 0) {\n                        url += '&';\n                    }\n\n                    url += \"filters[\" + encodeURI(column) + \"]=\" + encodeURI(value);\n                });\n\n                self.sorts.children(\":not(:first-child)\").each(function(index, sort) {\n                    let column = $(sort).find(\".column\").html();\n                    let direction = $(sort).find(\".direction\").html();\n\n                    if (index != 0) {\n                        url += '&';\n                    }\n\n                    url += \"sorts[\" + encodeURI(column) + \"]=\" + encodeURI(direction);\n                });\n\n                window.location = url;\n            });\n        },\n\n        removeAppliedFiltersFromSelection: function() {\n            self.filters.children(\":not(:first-child)\").each(function(index, filter) {\n                var column = $(filter).find(\".column\").html();\n\n                var select = self.addFilterForm.find(\"[name=filterColumn] option:contains(\" + column + \")\");\n                select.remove();\n            });\n        },\n\n        stringInput: function() {\n            var input = $(\"<input>\").attr('class', 'define-filter').attr('name', 'filterValue').attr('placeholder', 'Filter Value');\n            self.addFilterForm.find(\".define-filter-label\").after(input);\n\n            input.focus();\n        },\n\n        selectInput: function(filterConfig) {\n            var options = filterConfig['options'];\n            var input = $(\"<select></select>\").attr('class', 'define-filter').attr('name', 'filterValue');\n            input.append($(\"<option></option>\").prop('selected', 'selected').prop('disabled', true).html('Options'));\n\n            for (var value in options) {\n\n                var option = $(\"<option></option>\").attr('value', options[value]).html(ucwords(options[value],true));\n\n                input.append(option);\n\n            }\n\n            self.addFilterForm.find(\".define-filter-label\").after(input);\n\n            input.focus();\n        },\n\n        booleanInput: function() {\n\n        }\n    };","\n$(function(){\n\n    $(\"#saveDetailForm\").click(function(e){\n        e.preventDefault();\n        $(\"#detailForm\").submit();\n    });\n\n    $(\".data-group .data-group-field\").each(function(i, domElem){\n\n        var currentElement = $(domElem);\n        var currentHeight = currentElement.height();\n\n        if( i % 2 ){\n            var previousElement = $(currentElement).prev();\n            var previousHeight = previousElement.height();\n\n            if(currentHeight > previousHeight){\n\n                //console.log(\"1: Set previous element height to current elements height\");\n                previousElement.height(currentHeight);\n\n            }else{\n\n                //console.log(\"2: Set current element height to previous elements height\");\n                currentElement.height(previousHeight);\n\n            }\n        }\n\n    });\n})","function ucwords(str,force){\n    str=force ? str.toLowerCase() : str;\n    return str.replace(/(\\b)([a-zA-Z])/g,\n        function(firstLetter){\n            return   firstLetter.toUpperCase();\n        });\n}","$(\"#main #content .success .dismiss, #main #content .error .dismiss\").click(function(){\n    $(this).parent().hide();\n    return false;\n});","$(\"[wysiwyg='true']\").each(function(index, value)\n{\n    var attrId = $(this).attr('id');\n    var parentForm = $(this).closest(\"form\");\n    var saveButton = $(\"#\"+attrId+\"_save\");\n\n    CKEDITOR.replace( attrId, {\n        customConfig: '',\n        allowedContent: true,\n        extraAllowedContent : true,\n        toolbarGroups: [\n            { name: 'clipboard', groups: [ 'clipboard', 'undo' ] },\n            { name: 'editing', groups: [ 'find', 'selection', 'spellchecker', 'editing' ] },\n            { name: 'links', groups: [ 'links' ] },\n            { name: 'insert', groups: [ 'insert' ] },\n            { name: 'forms', groups: [ 'forms' ] },\n            { name: 'tools', groups: [ 'tools' ] },\n            { name: 'document', groups: [ 'mode', 'document', 'doctools' ] },\n            { name: 'others', groups: [ 'others' ] },\n            '/',\n            { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },\n            { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'paragraph' ] },\n            { name: 'styles', groups: [ 'styles' ] },\n            { name: 'colors', groups: [ 'colors' ] }\n        ]\n    });\n\n});","/**\n * Created by daltongibbs on 8/22/16.\n */\n\n$(function(){\n\n    $(document).on('dragenter', function(){\n        $(\"#main\").prepend(\"<div id='upload_hotspot'></div>\");\n\n        var dropzone = $(\"#upload_hotspot\").dropzone({\n            url: \"/upload/submit\",\n            method: \"put\",\n            paramName: \"file\",\n            uploadMultiple: true,\n            autoProcessQueue: true\n        });\n\n        dropzone.on('drop', function(file){\n            console.log(file);\n        });\n    });\n\n    $(document).on('dragleave', \"#upload_hotspot\", function(){\n        $(\"#upload_hotspot\").remove();\n    });\n\n});","\n$(function(){\n\n    // Enable CardTable for responsive tables\n    $('.table').cardtable();\n\n    // Clickable table rows\n    $('.table tbody tr').click(function(e){\n\n        var attr = $(this).attr('href');\n\n        if(attr) {\n            window.location = attr;\n        }\n\n        return false;\n    });\n\n    // Details field FOCUS\n    $('.data-group-field input[type=text],.data-group-field input[type=password]').focus(function() {\n        $('.data-group-field').removeClass('active');\n        $(this).closest('.data-group-field').addClass('active');\n    });\n\n    // Details field BLUR\n    $('.data-group-field input[type=text],.data-group-field input[type=password]').blur(function() {\n        $('.data-group-field').removeClass('active');\n    });\n\n    $('.data-group-field .image-field .image-upload').click(function() {\n        $(this).siblings('input').click();\n    });\n\n    $('.data-group-field .image-field .image-delete').click(function() {\n        var field = $(this);\n        var fieldName = field.data('name');\n        var deleteUrl = $(\"#deleteButton\").attr('href') + \"/\" + fieldName;\n\n        $.get(deleteUrl, function(response) {\n\n            field.siblings('.image-display').css({\n                'background-image' : \"url()\"\n            })\n\n        });\n    });\n});"]}